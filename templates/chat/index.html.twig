{% extends 'home/base.html.twig' %}

{% block title %}
    {% if currentUser and 'ROLE_PATIENT' in currentUser.roles %}
        Chat avec {{ soignant.nom }} {{ soignant.prenom }}
    {% elseif currentUser and 'ROLE_SOIGNANT' in currentUser.roles %}
        Chat avec {{ recipient.nom }} {{ recipient.prenom }}
    {% endif %}
{% endblock %}

{% block body %}
    <div class="container" style="margin-top: 220px; margin-bottom: 500px;">
        <h1 class="chat-header">
            {% if currentUser and 'ROLE_PATIENT' in currentUser.roles %}
                Chat avec {{ soignant.nom }} {{ soignant.prenom }}
            {% elseif currentUser and 'ROLE_SOIGNANT' in currentUser.roles %}
                Chat avec {{ recipient.nom }} {{ recipient.prenom }}
            {% endif %}
        </h1>
        <div class="chat-messages" id="chatMessages" style="max-height: 400px; overflow-y: auto; padding: 15px; background: linear-gradient(135deg, #ffffff, #f8f9fa); border-radius: 15px; box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1); margin-bottom: 20px;">
            {% for message in messages %}
                <div class="message {% if message.sender.id == currentUser.id %}sent{% else %}received{% endif %}">
                    <div class="message-content">
                        <strong class="message-author">{{ message.sender.nom }} {{ message.sender.prenom }}</strong>
                        <p class="message-text">{{ message.message }}</p>
                        <small class="message-time">{{ message.createdAt|date('d/m/Y H:i') }}</small>
                    </div>
                </div>
            {% endfor %}
        </div>
        <form id="chatForm" method="post" action="{{ path('app_chat_send', {'recipientId': recipient.id}) }}">
            <div class="input-group">
                <input type="text" name="message" id="chatInput" class="form-control chat-input" placeholder="Tapez votre message..." required>
                <button type="submit" class="btn btn-primary chat-send-btn">Envoyer</button>
            </div>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('chatForm');
            const messages = document.getElementById('chatMessages');
            let currentUserId = null;

            // Initial load to get currentUserId from JSON
            loadMessages();

            form.addEventListener('submit', function(e) {
                e.preventDefault();
                const message = document.getElementById('chatInput').value;
                if (message) {
                    fetch(this.action, {
                        method: 'POST',
                        body: new FormData(this)
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Send response:', data);
                        document.getElementById('chatInput').value = '';
                        loadMessages(); // Refresh immediately after sending
                    })
                    .catch(error => console.error('Send error:', error));
                }
            });

            function loadMessages() {
    fetch('{{ path('app_chat_with_soignant', {'recipientId': recipient.id}) }}', {
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        console.log('Poll response:', data);
        if (currentUserId === null && data.currentUserId) {
            currentUserId = parseInt(data.currentUserId, 10); // Set dynamically from JSON
        }

        // Get the IDs of existing messages
        const existingMessageIds = Array.from(messages.querySelectorAll('.message')).map(message => message.dataset.messageId);

        // Append only new messages
        data.messages.forEach(msg => {
            if (!existingMessageIds.includes(msg.id.toString())) {
                const senderId = parseInt(msg.senderId, 10); // Ensure senderId is a number
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${senderId === currentUserId ? 'sent' : 'received'}`;
                messageDiv.dataset.messageId = msg.id; // Add a data attribute for tracking
                messageDiv.innerHTML = `
                    <div class="message-content">
                        <strong class="message-author">${msg.senderName}</strong>
                        <p class="message-text">${msg.message}</p>
                        <small class="message-time">${msg.createdAt}</small>
                    </div>
                `;
                messages.appendChild(messageDiv);
            }
        });

        messages.scrollTop = messages.scrollHeight; // Scroll to the bottom
    })
    .catch(error => console.error('Poll error:', error));
}
    </script>

    <style>
        .chat-header {
            color: #333;
            font-weight: 800;
            margin-bottom: 25px;
            text-align: center;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            font-size: 2.2rem;
            animation: fadeInDown 1.2s ease-in;
        }

        @keyframes fadeInDown {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .chat-messages {
            border: 1px solid #e9ecef;
            transition: all 0.3s ease;
        }

        .chat-messages:hover {
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            transform: translateY(-4px);
        }

        .message {
            margin-bottom: 15px;
            padding: 12px;
            border-radius: 12px;
            transition: all 0.3s ease;
            animation: fadeIn 0.8s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .message:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .sent {
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: #fff; /* Set text color to white */
            text-align: right;
            margin-left: 20%;
            margin-right: 5px;
        }

        .sent .message-author,
        .sent .message-text,
        .sent .message-time {
            color: #fff; /* Ensure all text inside sent messages is white */
        }

        .received {
            background: linear-gradient(135deg, #e9ecef, #dee2e6);
            color: #333;
            text-align: left;
            margin-left: 5px;
            margin-right: 20%;
        }

        .message-content {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .message-author {
            font-weight: 600;
            font-size: 0.9rem;
            text-transform: capitalize;
            color: #007bff;
        }

        .message-text {
            margin: 0;
            font-size: 1rem;
            line-height: 1.4;
            word-wrap: break-word;
        }

        .message-time {
            font-size: 0.7rem;
            color: #666;
            opacity: 0.8;
            text-align: right;
        }

        .chat-input {
            border-radius: 8px 0 0 8px;
            border: 1px solid #007bff;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .chat-input:focus {
            border-color: #0056b3;
            box-shadow: 0 0 8px rgba(0, 123, 255, 0.3);
            outline: none;
        }

        .chat-send-btn {
            border-radius: 0 8px 8px 0;
            background: linear-gradient(135deg, #007bff, #0056b3);
            border: none;
            transition: all 0.3s ease;
        }

        .chat-send-btn:hover {
            background: linear-gradient(135deg, #0056b3, #003d7a);
            transform: scale(1.05);
            box-shadow: 0 4px 12px rgba(0, 87, 179, 0.3);
        }

        @media (max-width: 768px) {
            .sent, .received {
                margin-left: 5px;
                margin-right: 5px;
            }

            .chat-header {
                font-size: 1.8rem;
            }

            .message-author {
                font-size: 0.8rem;
            }

            .message-text {
                font-size: 0.9rem;
            }
        }
    </style>
{% endblock %}